AC_INIT([Makefile.in], 0.1)

dnl> Add /usr/local/ /opt/local
CFLAGS="${CFLAGS} -I/usr/local/include -I/opt/local/include"
CPPFLAGS="${CPPFLAGS} -I/usr/local/include -I/opt/local/include"
LDFLAGS="${LDFLAGS} -L/usr/local/lib -L/opt/local/lib"

SVN_RELEASE=`svn info . | grep "^Revision"|cut -d " " -f 2`
MACHINE=`uname -m`
SYSTEM=`uname -s`

if test $MACHINE = "x86_64"; then
   EXTN="amd64"
else
   EXTN="i386"
fi

DATE=`date +"%Y-%m-%d"`

PF_RING_HOME=${HOME}/PF_RING
if test -f "/usr/local/lib/libpfring.a"  || test -f "${PF_RING_HOME}/userland/lib/libpfring.a"; then
  AC_DEFINE_UNQUOTED(HAVE_PF_RING, 1, [Native PF_RING support])
  if test -f "${PF_RING_HOME}/userland/lib/libpfring.a"; then
      LDFLAGS="${LDFLAGS} ${PF_RING_HOME}/userland/lib/libpfring.a"
      CPPFLAGS="${CPPFLAGS} -I${PF_RING_HOME}/kernel -I${PF_RING_HOME}/userland/lib"
  else  
      LDFLAGS="${LDFLAGS} /usr/local/lib/libpfring.a"
  fi
fi

dnl> http://luajit.org/install.html
if test $SYSTEM = "Darwin"; then
   if test $MACHINE = "x86_64"; then 
      LINK_OPTS="-pagezero_size 10000 -image_base 100000000"
   fi
fi

AC_DEFINE_UNQUOTED(HAVE_ZMQ, 1, [ZMQ is present])
dnl> AC_CHECK_LIB([zmq], [zmq_send])
dnl> if test "x$ac_cv_lib_zmq_zmq_send" = xyes; then :
dnl> LDFLAGS="${LDFLAGS} -lzmq"
dnl> AC_DEFINE_UNQUOTED(HAVE_ZMQ, 1, [ZMQ is present])
dnl> fi

AC_MSG_CHECKING(for gnutls)
AC_CHECK_LIB([gnutls], [gnutls_priority_set], gnutls=true)

AC_DEFINE_UNQUOTED([HAVE_GNUTLS], $gnutls, [We have gnutls])
if test x$gnutls = xtrue
 then
  LIBGNUTLS="-lgnutls"

  AC_MSG_CHECKING(for gcrypt)
  AC_CHECK_LIB([gcrypt], [gcry_check_version], gcrypt=true)
  if test x$gcrypt = xtrue
  then
    LIBGNUTLS="${LIBGNUTLS} -lgcrypt"
  fi
fi

echo "Checking RRD prerequisites..."
AC_CHECK_LIB([xml2], [xmlParseFile], xml2=true)
if test x$xml2 = x
then
echo "Please install libxml2 (RRD prerequisite)"
exit
fi

AC_CHECK_LIB([glib-2.0], [glib_check_version], glib2=true)
if test x$glib2 = x
then
echo "Please install libglib-2.0 (RRD prerequisite)"
exit
fi

dnl> Check for package install
DOWNLOAD_GEOIP=0
AC_CHECK_LIB([GeoIP], [GeoIP_record_by_ipnum])
AC_HAVE_HEADERS(GeoIP.h)
if test ".${ac_cv_lib_GeoIP_GeoIP_record_by_ipnum}" = ".yes" &&
   test ".${ac_cv_header_GeoIP_h}" = ".yes"; then

AC_CHECK_LIB([GeoIP], [GeoIP_record_by_ipnum_v6])
if test ".${ac_cv_lib_GeoIP_GeoIP_record_by_ipnum_v6}" = ".yes"; then
   AC_DEFINE_UNQUOTED(HAVE_GEOIP_IPv6, 1, [GeoIP IPv6 support is present])
  dnl> LIBS="$LIBS -lGeoIP"
  AC_DEFINE_UNQUOTED(HAVE_GEOIP, 1, [GeoIP support is present])
  GEOIP_LIB="-lGeoIP" 
  dnl> Download databases
  DOWNLOAD_GEOIP=1
fi
else
AC_MSG_RESULT(Build ntop without geolocation - GeoIP (http://www.maxmind.com/))
GEOIP_DEP=""
fi


GMAKE=`which gmake`
if test x$GMAKE = x
then
	GMAKE="make"
fi

umask 002

AC_DEFINE_UNQUOTED(PACKAGE_RELEASE, "r$SVN_RELEASE", [SVN release of this package])
AC_DEFINE_UNQUOTED(PACKAGE_MACHINE, "$MACHINE", [Architecture of this host])
AC_SUBST(MACHINE)
AC_SUBST(SYSTEM)
AC_SUBST(EXTN)
AC_SUBST(DATE)
AC_SUBST(KERNEL)
AC_SUBST(SVN_RELEASE)
AC_SUBST(LINK_OPTS)
AC_SUBST(LIBGNUTLS)
AC_SUBST(GEOIP_LIB)
AC_SUBST(GMAKE)
AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)
AC_CONFIG_HEADERS(config.h)
AC_CONFIG_FILES(Makefile)

AC_OUTPUT

echo ""
echo "You are now ready to compile typing $GMAKE"

if test $DOWNLOAD_GEOIP = "1"
then
  echo "Please do not forget to download GeoIP databases doing: make geoip"
fi
